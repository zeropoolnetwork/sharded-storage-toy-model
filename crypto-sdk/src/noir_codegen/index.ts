// @ts-nocheck
/* Autogenerated file, do not edit! */

/* eslint-disable */

import { Noir, InputMap, CompiledCircuit, ForeignCallHandler } from "@noir-lang/noir_js"

export { ForeignCallHandler } from "@noir-lang/noir_js"

export type Field = string;
export type u1 = string | number;

export type RandomOracle = {
  offset: Field;
  data: Field[];
};

export type RollupPubInput = {
  old_root: Field;
  new_root: Field;
  now: Field;
  oracle: RandomOracle;
};

export type Root = {
  acc: Field;
  data: Field;
};

export type AccountTx = {
  sender_index: Field;
  receiver_index: Field;
  receiver_key: Field;
  amount: Field;
  nonce: Field;
};

export type MerkleProof = {
  index_bits: u1[];
  hash_path: Field[];
};

export type Account = {
  key: Field;
  balance: Field;
  nonce: Field;
  random_oracle_nonce: Field;
};

export type SignaturePacked = {
  a: Field;
  s: Field;
  r8: Field;
};

export type AccountTxAssets = {
  proof_sender: MerkleProof;
  proof_receiver: MerkleProof;
  account_sender: Account;
  account_receiver: Account;
  signature: SignaturePacked;
};

export type AccountTxEx = {
  tx: AccountTx;
  assets: AccountTxAssets;
};

export type AccountBlock = {
  txs: AccountTxEx[];
};

export type FileTx = {
  sender_index: Field;
  data_index: Field;
  time_interval: Field;
  data: Field;
  nonce: Field;
};

export type File = {
  expiration_time: Field;
  locked: boolean;
  owner: Field;
  data: Field;
};

export type FileTxAssets = {
  proof_sender: MerkleProof;
  proof_file: MerkleProof;
  account_sender: Account;
  file: File;
  signature: SignaturePacked;
};

export type FileTxEx = {
  tx: FileTx;
  assets: FileTxAssets;
};

export type FileBlock = {
  txs: FileTxEx[];
};

export type MiningTx = {
  sender_index: Field;
  nonce: Field;
  random_oracle_nonce: Field;
  mining_nonce: Field;
};

export type MiningTxAssets = {
  proof_sender: MerkleProof;
  account_sender: Account;
  random_oracle_value: Field;
  proof_file: MerkleProof;
  file: File;
  proof_data_in_file: MerkleProof;
  data_in_file: Field;
  signature: SignaturePacked;
};

export type MiningTxEx = {
  tx: MiningTx;
  assets: MiningTxAssets;
};

export type MiningBlock = {
  txs: MiningTxEx[];
};

export type RollupInput = {
  public: RollupPubInput;
  old_root: Root;
  new_root: Root;
  tx: AccountBlock;
  file: FileBlock;
  mining: MiningBlock;
};


